{"mappings":";;;;;;;;AAIA,MAAM,4BAAM;AACZ,0BAAI,GAAG,CAAC,eAAQ,MAAM,CAAC;AACvB,0BAAI,GAAG,CAAC,6BAAsB;IAAE,UAAU;AAAM;AAChD,0BAAI,GAAG,CAAC;AAER,MAAM,oCAAc;IAChB,QAAQ;IACR,SAAS;IACT,aAAa;AACf;AACF,0BAAI,GAAG,CAAC,YAAK;AACb,0BAAI,OAAO,CAAC,KAAK,YAAK;;AAEtB,MAAM,+BAAS,cAAkB;AAEjC,0BAAI,IAAI,CAAC,+CAA+C,OAAO,KAAK,KAAK;IACrE,IAAI;QACA,MAAM,UAAU,MAAM,6BAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;YAClD,sBAAsB;gBAAC;aAAO;YAC9B,6BAA6B;gBACzB,mBAAmB;oBAAC;oBAAM;iBAAK;YACnC;YACA,kBAAkB;gBACd;oBACI,oBAAoB;wBAChB,MAAM;wBACN,cAAc;4BACV,QAAQ;4BACR,UAAU;wBACd;wBACA,cAAc;wBACd,mBAAmB;4BACf,SAAS;gCACL,MAAM;gCACN,OAAO;4BACX;4BACA,SAAS;gCACL,MAAM;gCACN,OAAO;4BACX;wBACJ;oBACJ;gBACJ;gBACA;oBACI,oBAAoB;wBAChB,MAAM;wBACN,cAAc;4BACV,QAAQ;4BACR,UAAU;wBACd;wBACA,cAAc;wBACd,mBAAmB;4BACf,SAAS;gCACL,MAAM;gCACN,OAAO;4BACX;4BACA,SAAS;gCACL,MAAM;gCACN,OAAO;4BACX;wBACJ;oBACJ;gBACJ;aACH;YACD,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAU,CAAA;oBACtC,YAAY;wBACR,UAAU;wBACV,cAAc;4BACV,MAAM,KAAK,IAAI;4BACf,QAAQ;gCAAC,KAAK,OAAO;6BAAC;wBAC1B;wBACA,aAAa,KAAK,KAAK,GAAG;oBAC9B;oBACA,UAAU,KAAK,QAAQ;gBAC3B,CAAA;YACA,MAAM;YACN,aAAa;YACb,YAAY;QAChB;QACA,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACzB,EAAE,OAAO,OAAO;QACZ,KAAK;IACT;AACJ;AAEA,0BAAI,MAAM,CAAC,MAAM,WAAW,IAAM,QAAQ,GAAG,CAAC,CAAC,kBAAkB,EAAE,KAAK,CAAC","sources":["server.js"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst bodyparser = require('body-parser');\r\n\r\nconst app = express();\r\napp.use(express.static(\"public\"));\r\napp.use(bodyparser.urlencoded({ extended: false }));\r\napp.use(bodyparser.json());\r\n\r\nconst corsOptions = {\r\n    origin: 'https://ambitious-dune-06392b30f.5.azurestaticapps.net',\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n    credentials: true,\r\n  };\r\napp.use(cors(corsOptions));\r\napp.options('*', cors(corsOptions));\r\n\r\nconst stripe = require(\"stripe\")(\"sk_test_51PlvRgG1Zj6TIJKdXUtt0lgysWbL7KY0k4ythth1HFodYOuFhsyQYRexWdz9dZe3aPLOyXYCNazjcpfscJObXEOm00X8WFZSI8\");\r\n\r\napp.post(\"https://stripecheckout.netlify.app/checkout\", async (req, res, next) => {\r\n    try {\r\n        const session = await stripe.checkout.sessions.create({\r\n            payment_method_types: ['card'],\r\n            shipping_address_collection: {\r\n                allowed_countries: ['US', 'CA'],\r\n            },\r\n            shipping_options: [\r\n                {\r\n                    shipping_rate_data: {\r\n                        type: 'fixed_amount',\r\n                        fixed_amount: {\r\n                            amount: 0,\r\n                            currency: 'usd',\r\n                        },\r\n                        display_name: 'Free shipping',\r\n                        delivery_estimate: {\r\n                            minimum: {\r\n                                unit: 'business_day',\r\n                                value: 5,\r\n                            },\r\n                            maximum: {\r\n                                unit: 'business_day',\r\n                                value: 7,\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    shipping_rate_data: {\r\n                        type: 'fixed_amount',\r\n                        fixed_amount: {\r\n                            amount: 1500,\r\n                            currency: 'usd',\r\n                        },\r\n                        display_name: 'Next day air',\r\n                        delivery_estimate: {\r\n                            minimum: {\r\n                                unit: 'business_day',\r\n                                value: 1,\r\n                            },\r\n                            maximum: {\r\n                                unit: 'business_day',\r\n                                value: 1,\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n            ],\r\n            line_items: req.body.items.map((item) => ({\r\n                price_data: {\r\n                    currency: 'usd',\r\n                    product_data: {\r\n                        name: item.name,\r\n                        images: [item.product]\r\n                    },\r\n                    unit_amount: item.price * 100,\r\n                },\r\n                quantity: item.quantity,\r\n            })),\r\n            mode: \"payment\",\r\n            success_url: \"https://stripecheckout.netlify.app/success.html\",\r\n            cancel_url: \"https://stripecheckout.netlify.app/cancel.html\"\r\n        });\r\n        res.status(200).json(session);\r\n    } catch (error) {\r\n        next(error);\r\n    }\r\n});\r\n\r\napp.listen(PORT, '0.0.0.0', () => console.log(`app is running on ${PORT}`));"],"names":[],"version":3,"file":"index.js.map"}